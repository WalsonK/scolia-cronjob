# Nom du workflow qui apparaîtra dans l'onglet "Actions" de votre dépôt GitHub
name: Deploy to VPS

# Déclenche le workflow à chaque fois que du code est poussé sur la branche 'main'
on:
  push:
    branches:
      - main

jobs:
  deploy:
    # Nom du job
    name: Deploy to VPS
    # Le type de machine virtuelle sur lequel le job va s'exécuter
    runs-on: ubuntu-latest

    steps:
      # Étape 1: Récupérer le code de votre dépôt
      - name: Checkout code
        uses: actions/checkout@v3

      # Étape 2: Configurer la clé SSH
      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.VPS_SSH_PRIVATE_KEY }}
    
    # Étape 3: Déployer sur le VPS
      - name: Deploy and run Docker services
        run: |
          ssh-keyscan -H ${{ secrets.VPS_HOST }} >> ~/.ssh/known_hosts
          
          # CORRECTION: On retire les guillemets de 'EOF' pour permettre au runner d'injecter les secrets.
          # On utilise 'echo' pour chaque ligne pour éviter les problèmes de here-document.
          ssh ${{ secrets.VPS_USERNAME }}@${{ secrets.VPS_HOST }} << EOF
            set -e # Arrête le script si une commande échoue

            # Se déplace dans le répertoire du projet sur le VPS
            cd ~/scolia-cronjob

            # Récupère les dernières modifications de la branche main
            echo "Pulling latest changes..."
            git pull origin main
            
            # Reconstruit et redémarre les conteneurs en arrière-plan
            echo "Building and restarting containers..."
            docker compose up -d --build

            # Nettoie les anciennes images Docker non utilisées pour libérer de l'espace
            echo "Pruning old Docker images..."
            docker image prune -f
            
            echo "Deployment finished successfully!"
          EOF
